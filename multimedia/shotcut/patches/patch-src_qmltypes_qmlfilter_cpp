$OpenBSD: patch-src_qmltypes_qmlfilter_cpp,v 1.1 2020/05/26 17:05:42 espie Exp $
- x.toUf8().constData() is supplied as convenience function qUtf8Printable(x)
so use it
- the const char* returned is a temporary: you can't store it anywhere, you
have to recompute it each time you need it
Index: src/qmltypes/qmlfilter.cpp
--- src/qmltypes/qmlfilter.cpp.orig
+++ src/qmltypes/qmlfilter.cpp
@@ -64,11 +64,10 @@ QmlFilter::~QmlFilter()
 QString QmlFilter::get(QString name, int position)
 {
     if (m_filter.is_valid()) {
-        const char* propertyName = name.toUtf8().constData();
         if (position < 0)
-            return QString::fromUtf8(m_filter.get(propertyName));
+            return QString::fromUtf8(m_filter.get(qUtf8Printable(name)));
         else
-            return QString::fromUtf8(m_filter.anim_get(propertyName, position, duration()));
+            return QString::fromUtf8(m_filter.anim_get(qUtf8Printable(name), position, duration()));
     } else {
         return QString();
     }
@@ -77,11 +76,10 @@ QString QmlFilter::get(QString name, int position)
 double QmlFilter::getDouble(QString name, int position)
 {
     if (m_filter.is_valid()) {
-        const char* propertyName = name.toUtf8().constData();
         if (position < 0)
-            return m_filter.get_double(propertyName);
+            return m_filter.get_double(qUtf8Printable(name));
         else
-            return m_filter.anim_get_double(propertyName, position, duration());
+            return m_filter.anim_get_double(qUtf8Printable(name), position, duration());
     } else {
         return 0.0;
     }
@@ -90,14 +88,13 @@ double QmlFilter::getDouble(QString name, int position
 QRectF QmlFilter::getRect(QString name, int position)
 {
     if (!m_filter.is_valid()) return QRectF();
-    const char* s = m_filter.get(name.toUtf8().constData());
+    const char* s = m_filter.get(qUtf8Printable(name));
     if (s) {
-        const char* propertyName = name.toUtf8().constData();
         mlt_rect rect;
         if (position < 0) {
-            rect = m_filter.get_rect(propertyName);
+            rect = m_filter.get_rect(qUtf8Printable(name));
         } else {
-            rect = m_filter.anim_get_rect(propertyName, position, duration());
+            rect = m_filter.anim_get_rect(qUtf8Printable(name), position, duration());
         }
         if (::strchr(s, '%')) {
             return QRectF(qRound(rect.x * MLT.profile().width()),
@@ -117,7 +114,7 @@ QStringList QmlFilter::getGradient(QString name)
     QStringList list;
     for (int i = 1; i <= 10; i++) {
         QString colorName = name + "." + QString::number(i);
-        const char* value = m_filter.get(colorName.toUtf8().constData());
+        const char* value = m_filter.get(qUtf8Printable(colorName));
         if (value) {
             list.append(QString::fromUtf8(value));
         } else {
@@ -131,20 +128,20 @@ void QmlFilter::set(QString name, QString value, int p
 {
     if (!m_filter.is_valid()) return;
     if (position < 0) {
-        if (qstrcmp(m_filter.get(name.toUtf8().constData()), value.toUtf8().constData())) {
+        if (qstrcmp(m_filter.get(qUtf8Printable(name)), qUtf8Printable(value)))  {
 #if LIBMLT_VERSION_INT >= MLT_VERSION_SET_STRING 
-            m_filter.set_string(name.toUtf8().constData(), value.toUtf8().constData());
+            m_filter.set_string(qUtf8Printable(name), qUtf8Printable(value)) ;
 #else
-            m_filter.set(name.toUtf8().constData(), value.toUtf8().constData());
+            m_filter.set(qUtf8Printable(name), qUtf8Printable(value)) ;
 #endif
             emit changed(name);
         }
     } else {
         // Only set an animation keyframe if it does not already exist with the same value.
-        Mlt::Animation animation(m_filter.get_animation(name.toUtf8().constData()));
+        Mlt::Animation animation(m_filter.get_animation(qUtf8Printable(name)));
         if (!animation.is_valid() || !animation.is_key(position)
-                || value != m_filter.anim_get(name.toUtf8().constData(), position, duration())) {
-            m_filter.anim_set(name.toUtf8().constData(), value.toUtf8().constData(), position, duration());
+                || value != m_filter.anim_get(qUtf8Printable(name), position, duration())) {
+            m_filter.anim_set(qUtf8Printable(name), qUtf8Printable(value), position, duration());
             emit changed(name);
         }
     }
@@ -154,10 +151,10 @@ void QmlFilter::set(QString name, double value, int po
 {
     if (!m_filter.is_valid()) return;
     if (position < 0) {
-        if (!m_filter.get(name.toUtf8().constData())
-            || m_filter.get_double(name.toUtf8().constData()) != value) {
-            double delta = value - m_filter.get_double(name.toUtf8().constData());
-            m_filter.set(name.toUtf8().constData(), value);
+        if (!m_filter.get(qUtf8Printable(name))
+            || m_filter.get_double(qUtf8Printable(name)) != value) {
+            double delta = value - m_filter.get_double(qUtf8Printable(name));
+            m_filter.set(qUtf8Printable(name), value);
             emit changed(name);
             if (name == "in") {
                 emit inChanged(delta);
@@ -167,11 +164,11 @@ void QmlFilter::set(QString name, double value, int po
         }
     } else {
         // Only set an animation keyframe if it does not already exist with the same value.
-        Mlt::Animation animation(m_filter.get_animation(name.toUtf8().constData()));
+        Mlt::Animation animation(m_filter.get_animation(qUtf8Printable(name)));
         if (!animation.is_valid() || !animation.is_key(position)
-                || value != m_filter.anim_get_double(name.toUtf8().constData(), position, duration())) {
+                || value != m_filter.anim_get_double(qUtf8Printable(name), position, duration())) {
             mlt_keyframe_type type = getKeyframeType(animation, position, keyframeType);
-            m_filter.anim_set(name.toUtf8().constData(), value, position, duration(), type);
+            m_filter.anim_set(qUtf8Printable(name), value, position, duration(), type);
             emit changed(name);
         }
     }
@@ -181,10 +178,10 @@ void QmlFilter::set(QString name, int value, int posit
 {
     if (!m_filter.is_valid()) return;
     if (position < 0) {
-        if (!m_filter.get(name.toUtf8().constData())
-            || m_filter.get_int(name.toUtf8().constData()) != value) {
-            int delta = value - m_filter.get_int(name.toUtf8().constData());
-            m_filter.set(name.toUtf8().constData(), value);
+        if (!m_filter.get(qUtf8Printable(name))
+            || m_filter.get_int(qUtf8Printable(name)) != value) {
+            int delta = value - m_filter.get_int(qUtf8Printable(name));
+            m_filter.set(qUtf8Printable(name), value);
             emit changed(name);
             if (name == "in") {
                 emit inChanged(delta);
@@ -194,11 +191,11 @@ void QmlFilter::set(QString name, int value, int posit
         }
     } else {
         // Only set an animation keyframe if it does not already exist with the same value.
-        Mlt::Animation animation(m_filter.get_animation(name.toUtf8().constData()));
+        Mlt::Animation animation(m_filter.get_animation(qUtf8Printable(name)));
         if (!animation.is_valid() || !animation.is_key(position)
-                || value != m_filter.anim_get_int(name.toUtf8().constData(), position, duration())) {
+                || value != m_filter.anim_get_int(qUtf8Printable(name), position, duration())) {
             mlt_keyframe_type type = getKeyframeType(animation, position, keyframeType);
-            m_filter.anim_set(name.toUtf8().constData(), value, position, duration(), type);
+            m_filter.anim_set(qUtf8Printable(name), value, position, duration(), type);
             emit changed(name);
         }
     }
@@ -214,16 +211,16 @@ void QmlFilter::set(QString name, double x, double y, 
 {
     if (!m_filter.is_valid()) return;
     if (position < 0) {
-        mlt_rect rect = m_filter.get_rect(name.toUtf8().constData());
-        if (!m_filter.get(name.toUtf8().constData()) || x != rect.x || y != rect.y
+        mlt_rect rect = m_filter.get_rect(qUtf8Printable(name));
+        if (!m_filter.get(qUtf8Printable(name)) || x != rect.x || y != rect.y
             || width != rect.w || height != rect.h || opacity != rect.o) {
-            m_filter.set(name.toUtf8().constData(), x, y, width, height, opacity);
+            m_filter.set(qUtf8Printable(name), x, y, width, height, opacity);
             emit changed(name);
         }
     } else {
-        mlt_rect rect = m_filter.anim_get_rect(name.toUtf8().constData(), position, duration());
+        mlt_rect rect = m_filter.anim_get_rect(qUtf8Printable(name), position, duration());
         // Only set an animation keyframe if it does not already exist with the same value.
-        Mlt::Animation animation(m_filter.get_animation(name.toUtf8().constData()));
+        Mlt::Animation animation(m_filter.get_animation(qUtf8Printable(name)));
         if (!animation.is_valid() || !animation.is_key(position)
                 || x != rect.x || y != rect.y || width != rect.w || height != rect.h || opacity != rect.o) {
             rect.x = x;
@@ -232,7 +229,7 @@ void QmlFilter::set(QString name, double x, double y, 
             rect.h = height;
             rect.o = opacity;
             mlt_keyframe_type type = getKeyframeType(animation, position, keyframeType);
-            m_filter.anim_set(name.toUtf8().constData(), rect, position, duration(), type);
+            m_filter.anim_set(qUtf8Printable(name), rect, position, duration(), type);
             emit changed(name);
         }
     }
@@ -243,9 +240,9 @@ void QmlFilter::setGradient(QString name, const QStrin
     for (int i = 1; i <= 10;  i++) {
         QString colorName = name + "." + QString::number(i);
         if (i <= gradient.length()) {
-            m_filter.set(colorName.toUtf8().constData(), gradient[i-1].toUtf8().constData());
+            m_filter.set(qUtf8Printable(colorName), qUtf8Printable(gradient[i-1]));
         } else {
-            m_filter.clear(colorName.toUtf8().constData());
+            m_filter.clear(qUtf8Printable(colorName));
         }
     }
     emit changed();
@@ -511,12 +508,11 @@ int QmlFilter::duration()
 Mlt::Animation QmlFilter::getAnimation(const QString& name)
 {
     if (m_filter.is_valid()) {
-        const char* propertyName = name.toUtf8().constData();
-        if (!m_filter.get_animation(propertyName)) {
+        if (!m_filter.get_animation(qUtf8Printable(name))) {
             // Cause a string property to be interpreted as animated value.
-            m_filter.anim_get_double(propertyName, 0, duration());
+            m_filter.anim_get_double(qUtf8Printable(name), 0, duration());
         }
-        return m_filter.get_animation(propertyName);
+        return m_filter.get_animation(qUtf8Printable(name));
     }
     return Mlt::Animation();
 }
@@ -528,7 +524,7 @@ int QmlFilter::keyframeCount(const QString& name)
 
 void QmlFilter::resetProperty(const QString& name)
 {
-    m_filter.clear(name.toUtf8().constData());
+    m_filter.clear(qUtf8Printable(name));
     emit changed();
 }
 
@@ -572,7 +568,7 @@ void QmlFilter::preset(const QString &name)
 
     if(isYaml) {
         // Load from YAML file.
-        QScopedPointer<Mlt::Properties> properties(Mlt::Properties::parse_yaml(fileName.toUtf8().constData()));
+        QScopedPointer<Mlt::Properties> properties(Mlt::Properties::parse_yaml(qUtf8Printable(fileName)));
         if (properties && properties->is_valid()) {
             QChar decimalPoint = MLT.decimalPoint();
             for (int i = 0; i < properties->count(); i++) {
@@ -582,13 +578,13 @@ void QmlFilter::preset(const QString &name)
                 // Convert numeric strings to the current MLT numeric locale.
                 QString value = QString::fromUtf8(properties->get(i));
                 if (Util::convertDecimalPoints(value, decimalPoint))
-                    properties->set(name.toUtf8().constData(), value.toUtf8().constData());
+                    properties->set(qUtf8Printable(name), qUtf8Printable(value));
             }
             m_filter.inherit(*properties);
         }
     } else {
         // Load from legacy preset file
-        m_filter.load(fileName.toUtf8().constData());
+        m_filter.load(qUtf8Printable(fileName));
     }
 
     emit changed();
@@ -823,7 +819,7 @@ QString AnalyzeDelegate::resultsFromXml(const QString&
 
 void AnalyzeDelegate::updateFilter(Mlt::Filter& filter, const QString& results)
 {
-    filter.set("results", results.toUtf8().constData());
+    filter.set("results", qUtf8Printable(results));
     filter.set("reload", 1);
     filter.clear(kShotcutHashProperty);
     LOG_INFO() << "updated filter" << filter.get("mlt_service") << "with results:" << results;
