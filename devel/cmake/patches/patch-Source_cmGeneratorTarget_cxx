$OpenBSD: patch-Source_cmGeneratorTarget_cxx,v 1.13 2020/05/25 05:12:00 rsadowski Exp $

Index: Source/cmGeneratorTarget.cxx
--- Source/cmGeneratorTarget.cxx.orig
+++ Source/cmGeneratorTarget.cxx
@@ -4154,9 +4154,16 @@ cmGeneratorTarget::Names cmGeneratorTarget::GetLibrary
   // Check for library version properties.
   const char* version = this->GetProperty("VERSION");
   const char* soversion = this->GetProperty("SOVERSION");
+#if defined(__OpenBSD__)
+  if (this->GetType() != cmStateEnums::SHARED_LIBRARY &&
+      this->GetType() != cmStateEnums::MODULE_LIBRARY)
+#else
   if (!this->HasSOName(config) ||
       this->Makefile->IsOn("CMAKE_PLATFORM_NO_VERSIONED_SONAME") ||
       this->IsFrameworkOnApple()) {
+      this->IsFrameworkOnApple())
+#endif
+  {
     // Versioning is supported only for shared libraries and modules,
     // and then only when the platform supports an soname flag.
     version = nullptr;
@@ -4180,6 +4187,35 @@ cmGeneratorTarget::Names cmGeneratorTarget::GetLibrary
 
   // The library name.
   targetNames.Output = prefix + targetNames.Base + suffix;
+
+#if defined(__OpenBSD__)
+  // Override shared library version using LIBxxx_VERSION
+  // environment variable. Needed for OpenBSD ports system.
+  if (this->GetType() == cmStateEnums::SHARED_LIBRARY ||
+      this->GetType() == cmStateEnums::MODULE_LIBRARY) {
+    std::string env_name = "LIB" + targetNames.Base + "_VERSION";
+    char *env_vers_cstr = getenv(env_name.c_str());
+
+    if (env_vers_cstr && strlen(env_vers_cstr) > 0) {
+      // This means an override is present.
+      std::string env_vers = std::string(env_vers_cstr);
+
+      size_t first = env_vers.find_first_of(".");
+      size_t last = env_vers.find_last_of(".");
+
+      if ((first != last) || (first == std::string::npos)) {
+        std::string msg = "Bad ";
+        msg += env_name;
+        msg += " specification: ";
+        msg += env_vers;
+        this->LocalGenerator->IssueMessage(MessageType::INTERNAL_ERROR, msg);
+      } else {
+        version = env_vers_cstr;
+        soversion = env_vers_cstr;
+      }
+    }
+  }
+#endif
 
   if (this->IsFrameworkOnApple()) {
     targetNames.Real = prefix;
